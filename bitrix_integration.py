# -*- coding: utf-8 -*-
import requests
import json
import logging
from config import COMPANY_PHONES

async def send_to_bitrix(user_data, formatted_message, thread_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –ë–∏—Ç—Ä–∏–∫—Å24 —á–µ—Ä–µ–∑ webhook."""
    # TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π URL webhook –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    # BITRIX_WEBHOOK_URL = "https://your-bitrix.bitrix24.ru/rest/webhook/..."
    
    payload = {
        "user_id": user_data.get("id"),
        "username": user_data.get("username"),
        "first_name": user_data.get("first_name"),
        "language": user_data.get("language"),
        "formatted_message": formatted_message,
        "thread_id": thread_id,
        "source": "telegram_bot"
    }
    
    # –ü–æ–∫–∞ –ª–æ–≥–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logging.info(f"Enhanced transfer to Bitrix24:")
    logging.info(f"User: {user_data.get('first_name')} (@{user_data.get('username')})")
    logging.info(f"Language: {user_data.get('language', 'ru')}")
    logging.info(f"Thread ID: {thread_id}")
    logging.info(f"Message length: {len(formatted_message)} characters")
    logging.info("‚îÄ" * 50)
    logging.info(formatted_message)
    logging.info("‚îÄ" * 50)
    
    # TODO: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç webhook URL
    # try:
    #     response = requests.post(BITRIX_WEBHOOK_URL, json=payload, timeout=10)
    #     if response.status_code == 200:
    #         logging.info(f"Successfully sent enhanced data to Bitrix24: {response.json()}")
    #         return True
    #     else:
    #         logging.error(f"Bitrix24 error: {response.status_code} - {response.text}")
    #         return False
    # except Exception as e:
    #     logging.error(f"Error sending to Bitrix24: {e}")
    #     return False
    
    return True  # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

def format_transfer_message():
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–¥–∞—á–µ –∑–∞–ø—Ä–æ—Å–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É."""
    phones_text = "\n".join([f"üìû {phone}" for phone in COMPANY_PHONES])
    
    return (
        "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        f"–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º:\n{phones_text}"
    )