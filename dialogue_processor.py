#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24 –∏ —Å–æ–∑–¥–∞–Ω–∏—è Q&A –ø–∞—Ä –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
"""

import pandas as pd
import json
import re
import glob
import os
from datetime import datetime
from typing import List, Dict, Tuple
import sys
import argparse

class DialogueProcessor:
    def __init__(self):
        self.qa_pairs = []
    
    def read_excel_file(self, file_path: str) -> pd.DataFrame:
        """–ß–∏—Ç–∞–µ—Ç Excel —Ñ–∞–π–ª —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –∏–ª–∏ HTML —Ñ–∞–π–ª"""
        try:
            # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
            with open(file_path, 'rb') as f:
                first_bytes = f.read(10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ HTML —Ñ–∞–π–ª
            if first_bytes.startswith(b'\xef\xbb\xbf<html') or first_bytes.startswith(b'<html') or first_bytes.startswith(b'<!DOCTYPE'):
                # –≠—Ç–æ HTML —Ñ–∞–π–ª - —á–∏—Ç–∞–µ–º –∫–∞–∫ HTML —Ç–∞–±–ª–∏—Ü—É
                print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω HTML —Ñ–∞–π–ª, —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–∞–±–ª–∏—Ü—É...")
                tables = pd.read_html(file_path, encoding='utf-8')
                
                if not tables:
                    raise ValueError("HTML —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Ç–∞–±–ª–∏—Ü—É (–æ–±—ã—á–Ω–æ —Å–∞–º—É—é –±–æ–ª—å—à—É—é)
                df = tables[0]
                
            else:
                # –ù–∞—Å—Ç–æ—è—â–∏–π Excel —Ñ–∞–π–ª
                print("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω Excel —Ñ–∞–π–ª...")
                if file_path.lower().endswith('.xls'):
                    df = pd.read_excel(file_path, engine='xlrd')
                else:
                    df = pd.read_excel(file_path, engine='openpyxl')
            
            print(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {len(df)} —Å—Ç—Ä–æ–∫")
            print(f"üìã –ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            print(f"üîç –ü–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
            print(df.head(2))
            
            return df
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            print(f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            sys.exit(1)
    
    def clean_message(self, message: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤"""
        if not message or pd.isna(message):
            return ""
        
        message = str(message)
        # –£–±–∏—Ä–∞–µ–º \\n
        message = message.replace('\\n', '\n')
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        message = re.sub(r'\s+', ' ', message).strip()
        # –£–±–∏—Ä–∞–µ–º URL-—ã
        message = re.sub(r'https?://\S+', '[–°–°–´–õ–ö–ê]', message)
        
        return message
    
    def parse_dialogue(self, dialogue_text: str, client_name: str) -> List[Dict]:
        """–ü–∞—Ä—Å–∏—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if not dialogue_text or pd.isna(dialogue_text):
            return []
        
        dialogue_text = self.clean_message(dialogue_text)
        messages = []
        
        # –°–ø–∏—Å–æ–∫ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        operators = ['Sitora', 'Yulia', 'Yuliya', 'Sofiya', 'Anton', 'Liliya']
        all_speakers = [client_name] + operators
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –≥–¥–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è "–ò–º—è:"
        positions = []
        for speaker in all_speakers:
            speaker_pattern = f"{speaker}:"
            start = 0
            while True:
                pos = dialogue_text.find(speaker_pattern, start)
                if pos == -1:
                    break
                positions.append((pos, speaker))
                start = pos + 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ–∑–∏—Ü–∏–∏
        positions.sort()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for i, (pos, speaker) in enumerate(positions):
            # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞ (–ø–æ—Å–ª–µ "–ò–º—è:")
            text_start = pos + len(speaker) + 1
            
            # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü —Ç–µ–∫—Å—Ç–∞ (–¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ "–ò–º—è:" –∏–ª–∏ –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏)
            if i + 1 < len(positions):
                text_end = positions[i + 1][0]
            else:
                text_end = len(dialogue_text)
            
            text = dialogue_text[text_start:text_end].strip()
            
            if text and len(text) > 2:
                # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö –∏–º–µ–Ω –≤ –∫–æ–Ω—Ü–µ
                for other_speaker in all_speakers:
                    if text.endswith(f" {other_speaker}"):
                        text = text[:-len(other_speaker)-1].strip()
                
                is_client = speaker == client_name
                
                messages.append({
                    'speaker': speaker,
                    'text': text,
                    'is_client': is_client
                })
        
        return messages
    
    def is_good_qa_pair(self, question: str, answer: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ Q&A –ø–∞—Ä—ã"""
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞
        if len(question) < 10 or len(answer) < 5:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–æ–ø—Ä–æ—Å
        question_indicators = ['?', '–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '—Å–∫–æ–ª—å–∫–æ', '–º–æ–∂–Ω–æ', '–µ—Å—Ç—å']
        has_question_indicator = any(indicator in question.lower() for indicator in question_indicators)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π
        bad_answers = ['–¥–∞', '–Ω–µ—Ç', '—Ö–æ—Ä–æ—à–æ', '–æ–∫', '–ø–æ–Ω—è—Ç–Ω–æ', '—Å–ø–∞—Å–∏–±–æ']
        is_bad_answer = answer.lower().strip() in bad_answers
        
        return has_question_indicator and not is_bad_answer
    
    def extract_full_dialogues(self, df: pd.DataFrame) -> List[Dict]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ü–û–õ–ù–´–ï –¥–∏–∞–ª–æ–≥–∏, –∞ –Ω–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ Q&A –ø–∞—Ä—ã"""
        full_dialogues = []
        
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(df)} –¥–∏–∞–ª–æ–≥–æ–≤...")
        
        for idx, row in df.iterrows():
            client_name = str(row.get('–ö–ª–∏–µ–Ω—Ç', ''))
            dialogue_text = row.get('–î–∏–∞–ª–æ–≥ (Demo)', '')
            
            if not dialogue_text:
                continue
            
            messages = self.parse_dialogue(dialogue_text, client_name)
            
            if len(messages) == 0:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ –¥–∏–∞–ª–æ–≥–∏
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–ï–°–¨ –¥–∏–∞–ª–æ–≥ —Ü–µ–ª–∏–∫–æ–º
            full_dialogues.append({
                'dialogue_id': row.get('‚Ññ', idx),
                'client': client_name,
                'operator': messages[0]['speaker'] if not messages[0]['is_client'] else (messages[1]['speaker'] if len(messages) > 1 else 'Unknown'),
                'messages': messages,
                'message_count': len(messages)
            })
        
        return full_dialogues
    
    def save_to_json(self, full_dialogues: List[Dict], output_file: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –≤ JSON"""
        output_data = {
            'meta': {
                'total_dialogues': len(full_dialogues),
                'total_messages': sum(d['message_count'] for d in full_dialogues),
                'generated_by': 'DialogueProcessor v2.0'
            },
            'dialogues': full_dialogues
        }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(output_data, f, ensure_ascii=False, indent=2)
        
        print(f"‚úÖ JSON —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")
    
    def save_to_txt(self, full_dialogues: List[Dict], output_file: str):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ü–û–õ–ù–´–ï –¥–∏–∞–ª–æ–≥–∏ –≤ TXT –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ Vector Store"""
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∫–ª–∏–µ–Ω—Ç–æ–≤ Web2Print\n\n")
            f.write("–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê: –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—è, –ø–µ—á–∞—Ç—å, —Å—Ä–æ–∫–∏, —Ü–µ–Ω—ã, –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –¥–∏–∑–∞–π–Ω, –∫–ª–∏–µ–Ω—Ç—ã, –∑–∞–∫–∞–∑—ã\n\n")
            
            for i, dialogue in enumerate(full_dialogues, 1):
                f.write(f"–î–ò–ê–õ–û–ì {i} - ID {dialogue['dialogue_id']}\n")
                f.write(f"–ö–ª–∏–µ–Ω—Ç: {dialogue['client']}\n")
                f.write(f"–û–ø–µ—Ä–∞—Ç–æ—Ä: {dialogue['operator']}\n")
                f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {dialogue['message_count']}\n\n")
                
                f.write("–ü–û–õ–ù–´–ô –î–ò–ê–õ–û–ì:\n")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–æ—Ä—è–¥–∫—É
                for msg in dialogue['messages']:
                    role = "–ö–ª–∏–µ–Ω—Ç" if msg['is_client'] else "–û–ø–µ—Ä–∞—Ç–æ—Ä"
                    f.write(f"{role}: {msg['text']}\n")
                
                f.write("\n")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –æ–±—â–∏–µ –±–∏–∑–Ω–µ—Å-—Ç–µ–º—ã –¥–∏–∞–ª–æ–≥–∞ (–ë–ï–ó –ø—Ä–æ–¥—É–∫—Ü–∏–∏)
                topics = set()
                dialogue_text = " ".join([msg['text'].lower() for msg in dialogue['messages']])
                
                if any(word in dialogue_text for word in ['—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ', '—Å—Ç–æ–∏—Ç', '—Ä—É–±–ª', '—Å—É–º']):
                    topics.add('–¶–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')
                if any(word in dialogue_text for word in ['—Å—Ä–æ–∫', '–≤—Ä–µ–º—è', '–∫–æ–≥–¥–∞', '–≥–æ—Ç–æ–≤', '–¥–µ–Ω—å', '—á–∞—Å']):
                    topics.add('–°—Ä–æ–∫–∏ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è')
                if any(word in dialogue_text for word in ['—Ä–∞–∑–º–µ—Ä', '—Ñ–æ—Ä–º–∞—Ç', '—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä', '–º–º', '—Å–º']):
                    topics.add('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏')
                if any(word in dialogue_text for word in ['–¥–∏–∑–∞–π–Ω', '–º–∞–∫–µ—Ç', '—Ñ–∞–π–ª', '–∫–∞—Ä—Ç–∏–Ω–∫', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω']):
                    topics.add('–î–∏–∑–∞–π–Ω –∏ –º–∞–∫–µ—Ç—ã')
                if any(word in dialogue_text for word in ['–¥–æ—Å—Ç–∞–≤–∫', '—Å–∞–º–æ–≤—ã–≤–æ–∑', '–ø—Ä–∏–≤–µ–∑', '–∫—É—Ä—å–µ—Ä']):
                    topics.add('–î–æ—Å—Ç–∞–≤–∫–∞')
                if any(word in dialogue_text for word in ['–æ–ø–ª–∞—Ç', '–ø–ª–∞—Ç', '—Å—á–µ—Ç', '–¥–µ–Ω—å–≥']):
                    topics.add('–û–ø–ª–∞—Ç–∞')
                if any(word in dialogue_text for word in ['–º–∞—Ç–µ—Ä–∏–∞–ª', '–±—É–º–∞–≥', '—Ç–∫–∞–Ω', '–∫–∞—á–µ—Å—Ç–≤']):
                    topics.add('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã')
                if any(word in dialogue_text for word in ['–∑–∞–∫–∞–∑', '–æ—Ñ–æ—Ä–º', '–∫–∞–∫ –ø–æ–ª—É—á']):
                    topics.add('–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞')
                
                f.write("–ö–õ–Æ–ß–ï–í–´–ï –¢–ï–ú–´: ")
                if topics:
                    f.write(f"{', '.join(sorted(topics))}\n\n")
                else:
                    f.write("–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n")
                
                f.write("---\n\n")
            
            f.write("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–ó–ï –ó–ù–ê–ù–ò–ô\n")
            f.write(f"–í—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(full_dialogues)}\n")
            f.write(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sum(d['message_count'] for d in full_dialogues)}\n")
            f.write(f"–ò—Å—Ç–æ—á–Ω–∏–∫: –†–µ–∞–ª—å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24\n")
            f.write(f"–ö–æ–º–ø–∞–Ω–∏—è: Web2Print - –ø–æ–ª–∏–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏\n")
            f.write(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –≤—ã–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤\n")
        
        print(f"‚úÖ TXT —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")
    
    def print_statistics(self, qa_pairs: List[Dict]):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º"""
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"–í—Å–µ–≥–æ Q&A –ø–∞—Ä: {len(qa_pairs)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
        print(f"\nüíé –ü—Ä–∏–º–µ—Ä—ã Q&A –ø–∞—Ä:")
        for i, qa in enumerate(qa_pairs[:3]):
            print(f"\n{i+1}. –ö–ª–∏–µ–Ω—Ç: {qa['client']}")
            print(f"   ‚ùì {qa['question']}")
            print(f"   ‚úÖ {qa['answer']}")
    
    def process_file(self, input_file: str):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞"""
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        df = self.read_excel_file(input_file)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ü–û–õ–ù–´–ï –¥–∏–∞–ª–æ–≥–∏
        full_dialogues = self.extract_full_dialogues(df)
        
        return full_dialogues

def find_excel_files(directory='.'):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ Excel —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    patterns = ['*.xls', '*.xlsx']
    files = []
    
    for pattern in patterns:
        files.extend(glob.glob(os.path.join(directory, pattern)))
    
    return files

def create_output_directory():
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_dir = f"dialogue_processing_{timestamp}"
    os.makedirs(output_dir, exist_ok=True)
    return output_dir

def main():
    parser = argparse.ArgumentParser(description='–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ Q&A –ø–∞—Ä—ã')
    parser.add_argument('--file', help='–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏')
    parser.add_argument('--dir', default='.', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ Excel —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)')
    parser.add_argument('--output-dir', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞)')
    
    args = parser.parse_args()
    
    processor = DialogueProcessor()
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if args.output_dir:
        output_dir = args.output_dir
        os.makedirs(output_dir, exist_ok=True)
    else:
        output_dir = create_output_directory()
    
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if args.file:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–π–ª
        if not os.path.exists(args.file):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.file}")
            sys.exit(1)
        files_to_process = [args.file]
    else:
        # –ò—â–µ–º –≤—Å–µ Excel —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        files_to_process = find_excel_files(args.dir)
        
        if not files_to_process:
            print(f"‚ùå Excel —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {args.dir}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .xls –∏–ª–∏ .xlsx")
            sys.exit(1)
        
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ Excel —Ñ–∞–π–ª–æ–≤: {len(files_to_process)}")
        for f in files_to_process:
            print(f"   üìÑ {f}")
        print()
    
    all_dialogues = []
    processing_info = {
        'timestamp': datetime.now().isoformat(),
        'files_processed': [],
        'total_dialogues': 0,
        'total_messages': 0,
        'output_directory': output_dir
    }
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for file_path in files_to_process:
        print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {os.path.basename(file_path)}")
        
        try:
            dialogues = processor.process_file(file_path)
            all_dialogues.extend(dialogues)
            
            total_messages = sum(d['message_count'] for d in dialogues)
            
            file_info = {
                'filename': os.path.basename(file_path),
                'full_path': file_path,
                'dialogues_extracted': len(dialogues),
                'messages_extracted': total_messages,
                'status': 'success'
            }
            processing_info['files_processed'].append(file_info)
            
            print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(dialogues)} –¥–∏–∞–ª–æ–≥–æ–≤ ({total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π) –∏–∑ {os.path.basename(file_path)}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {file_path}: {e}")
            
            file_info = {
                'filename': os.path.basename(file_path),
                'full_path': file_path,
                'dialogues_extracted': 0,
                'messages_extracted': 0,
                'status': 'error',
                'error': str(e)
            }
            processing_info['files_processed'].append(file_info)
            continue
    
    if not all_dialogues:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∏–∞–ª–æ–≥–∏ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        sys.exit(1)
    
    processing_info['total_dialogues'] = len(all_dialogues)
    processing_info['total_messages'] = sum(d['message_count'] for d in all_dialogues)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
    if len(files_to_process) == 1:
        # –û–¥–∏–Ω —Ñ–∞–π–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∏–º—è
        base_name = os.path.splitext(os.path.basename(files_to_process[0]))[0]
    else:
        # –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ - –æ–±—â–µ–µ –∏–º—è
        base_name = "combined_dialogues"
    
    # –ü—É—Ç–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    json_output = os.path.join(output_dir, f"{base_name}_full_dialogues.json")
    txt_output = os.path.join(output_dir, f"{base_name}_knowledge_base.txt")
    info_output = os.path.join(output_dir, "processing_info.json")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –ò–¢–û–ì–û –∏–∑–≤–ª–µ—á–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(all_dialogues)}")
    print(f"üìä –ò–¢–û–ì–û —Å–æ–æ–±—â–µ–Ω–∏–π: {sum(d['message_count'] for d in all_dialogues)}")
    
    processor.save_to_json(all_dialogues, json_output)
    processor.save_to_txt(all_dialogues, txt_output)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    with open(info_output, 'w', encoding='utf-8') as f:
        json.dump(processing_info, f, ensure_ascii=False, indent=2)
    
    print(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {info_output}")
    print(f"\nüéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {output_dir}")
    print(f"üìã –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è Vector Store: {txt_output}")

if __name__ == "__main__":
    main()